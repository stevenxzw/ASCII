

'use strict';

module.exports = function (grunt) {


    var ln = grunt.util.normalizelf('\n');
    var fileNameReg = /\/([^\/\\]+?)(\.[a-zA-z\d]+)?$/gi;
	function decToHex(code) {
		var res=[];
		for(var i=0;i < code.length;i++){
			res[i]=("00"+code.charCodeAt(i).toString(16)).slice(-4);
		}
		return "\\u"+res.join("\\u");
	}
    grunt.registerMultiTask('ascii', 'Compiled template files into JavaScript files', function () {
		console.log('in--ascii');
		var T = require('grunt').template.today("yyyy-mm-dd HH:MM");

		console.log()
		
		//console.log(this);
		
		//this.forEach(function (f) {
		//	console.log(this);
		//	console.log('==================');
		//	console.log(f);
		//});
		if(this.target === 'toAsciiCode'){//把编码变成ASCII
			console.log('toAsciiCode');
			console.log(this.files);
			console.log('-----------------');
			this.files.forEach(function (f) {
				console.log(f.dest);
				f.src.map(function (filepath) {				
					var content = grunt.util.normalizelf(grunt.file.read(filepath)), strs = [];
					console.log(filepath);
					for(var i=0,l=content.length;i<l;i++)
						strs.push(content.charCodeAt(i));
					//console.log(strs.toString());
					//grunt.file.write(dest + item.name + '.js', strs.toString());
					grunt.file.write(f.dest, strs.toString());
					//console.log(content);
				});
			});
		}else if(this.target === 'toEndCode'){//把代码再
			console.log('toEndCode');
			this.files.forEach(function (f) {
				console.log(f.dest);
				f.src.map(function (filepath) {				
					var content = grunt.util.normalizelf(grunt.file.read(filepath));					
					var code = '/*'+T+' gf*/var/*gf*/ fgS= '+decToHex("String")+'.'+decToHex("fromCharCode")+'; gfq /*gf*/= '+decToHex("eval");
					grunt.file.write(f.dest, code+';gfq/*gf*/(fgS/*gf*/('+content+'))');

				});
			});
		}
	
    });

    function endsWith(str, suffix) {
        var index = str.length - suffix.length;
        return index >= 0 && str.indexOf(suffix, index) == index;
    }
};
